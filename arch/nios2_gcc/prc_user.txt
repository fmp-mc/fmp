=====================================================================
                     Nios2プロセッサ依存部マニュアル
                                  Last Modified: 2012 Feb 24 10:58:29
=====================================================================

○概要

Nios2プロセッサ依存部（以下，Nios2依存部）は，Altera社のNios2プロセッ
サ をターゲットとしている．サポートしている NiosII エンベデッド・デザ
イン・スイート のバージョンは，8.1 である．これ以降のバージョンに関し
ては，プロセッサやコンパイラに大きな変更がなければ，動作させることが可
能である．

Nios2は，ソフトコアプロセッサであるため，コアの構成や周辺回路の構成や
アドレス等を変更することが可能である．Nios2依存部では，プロセッサコア
とタイマ（Avalon Timer）とUART（JTAG UART）のみをサポートしている．ア
ドレス等の設定に関しては，ターゲット依存部で設定する．

○開発環境

カーネルのコンパイルは，NiosII エンベデッド・デザイン・スイート に付属
している，GCC を用いる．動作確認を行なったバージョンは，3.4.6 である．

○コア構成

FMPカーネルは，Nios2 コアの標準の構成で動作する．その他の追加命令（div
やmulti）は使用していない．これらの追加命令を使用する場合は，ターゲッ
ト依存部で適切にコンパイルオプションを設定する必要がある．なお，FPU 
MMU MPU はサポートしていない．

キャッシュに関しては，Dキャッシュは，ハードウェアでNiosIIコア間でコヒ
ーレントを確保できないため，サポートしない．

例外に関しては，未定義命令以外の例外を用いる場合（MMUやMPUの追加時等）
は，ターゲット依存部で NIOS2_USE_EXTRA_EXCEPTION を定義すること．

割込み応答時間を高速化したい場合は，カスタム命令として，Interrupt 
Vector Instruction を追加することで高速化可能である．

○周辺回路

FMPカーネルを動作させるためには，周辺回路として，プロセッサ毎にUART（
JTAG UART），タイマ（Avalon Timer），プロセッサ間割込み回路をそれぞれ1
個ずつ，Mutex回路が2個ずつ必要となる．また，システム全体でシステムバー
ジョン回路を1個とMutex回路が1個必要となる．Avalon Timerの設定は，
Presets は Custom とし、Registers は全て有効とする．また，それぞれ割込
みを使用するように設定する．プロセッサ間割込み回路は，Nios2には含まれ
ておらず，本ディレクトリにある prc_int を用いること．システムバージョ
ン回路も本ディレクトリにある sysver を用いること．

○CPU例外ハンドラ番号

CPU例外ハンドラ番号としては，exception レジスタのCAUSEフィールドにセッ
トされる値を用いる．

○CPU例外フレーム

CPU例外ハンドラの引数に渡す，CPU例外フレームの構成を次に示す．

     内容                  オフセット
 例外番号                       0
 statusレジスタ                 4
 割込み・例外ネストカウント     8
 戻りアドレス                  12
 割込み優先度マスク(ipm)       16

○Trap例外

Trap例外のハンドラは，prc_support.S で，trap_handler として用意してい
る．ディフォルトでは，単にリターンする．

○未登録の例外の発生

未登録の例外が発生した場合は，prc_config.c で定義されている．
default_exc_handler() が呼び出される．default_exc_handler() は，発生し
た例外の，CPU例外フレームの内容を表示した後，target_exit() を呼び出す．

○割り込みハンドラ番号と割込み番号

割込みハンドラ番号(inhno)と割込み番号(intno)は，SOPC Builder で指定し
た，割込み番号を用いる．

○カーネル管理内/外の割込み

Nios2依存部では，カーネル管理外の割込みはサポートしない．

○割込み優先度

CFG_INTに指定可能な割込み優先度としては，-1 から -7 までの値を設定可能
である．

○割込み属性

CFG_INTでサポートしている割込み属性はない．

○未登録の割込み

未登録の割込みが発生した場合は，prc_config.c で定義されている，
default_int_handler() を呼び出す．default_int_handler() は，発生した割
り込みの割込み番号をコンソールに出力した後，target_exit() を呼び出す．

○デバイスアクセス関数

Nios2では，メモリ空間とI/O空間を区別していないが，データキャッシュを有
効とした場合，キャッシュをスルーしてデバイスにアクセスする命令を用いて
デバイスをアクセスする必要がある．そのため，Nios2依存部では，キャッシ
ュをスルーしてアクセスするI/O空間アクセス関数を用意している．

	sil_reb_iop
	sil_wrb_iop
	sil_reh_iop
	sil_wrh_iop
	sil_rew_iop
	sil_wrw_iop

○ターゲット依存部開発者向けの情報

ターゲット依存部では，ペリフェラルのベースアドレスや割込み番号，キャッ
シュ設定等を設定する必要がある．標準でパッケージには2コアのハードウェ
アのptfファイルがが含まれている．

●プロセッサ間割込みの割込み番号

プロセッサ間割込みの割込み番号は全てのプロセッサで同一の値とする必要が
ある．また割込み番号を次のマクロに定義する．

  PRC_INT_INT

●割込み応答時間の高速化

割込み応答時間を高速化するためには，Interrupt Vector Instruction をカ
スタム命令として追加して以下のマクロを定義する．

#define NIOS2_USE_INT_VEC_INST       /* Interrupt Vector Instruction を使う */
#define NIOS2_INT_VEC_INST_NO    x   /* 命令番号                            */

○バージョン履歴
2012/02/2
・core_config.h/core_config.c
  ・共通部で initialize_exception() は通常の関数としてプロトタイプ宣言
    されているため，インライン関数ではなく，通常の関数として宣言するよ
    う変更．
    
2011/07/12
・ret_int_3でdispatch_call_texrtnではなくcall_tertnを読んでいる問題を
  解決．

2011/05/20
・ASP 1.7 追従．
・オフセットファイルの生成方法をコンフィギュレータを用いる方法に変更． 

2010/09/13
・1.2追従．

2010/05/11
・割込み入り口のrelease_lockの問題を修正

2010/01/27
・ロック変数の型(LOCK)の定義をtypedefに変更．

2010/01/20
・TOPPERS_ISTKPT(istk, istksz)の修正．
  ・スタックサイズの単位をintからchar_tに修正．

2010/01/20
・proc_intの修正
  ・レジスタへのアクセスでchipselectを見ていなかった問題を修正．

2009/11/20
・スタートアップルーチンでマスタプロセッサをTOPPERS_MASTER_PRCIDを見て
  判定するように変更．

2009/11/09
・default_int_handler(void *p_excinf)の修正
  ・p_excinfを割り込み番号へのポインタとして扱っていたが，正しくは割り
    込み番号であるため修正．

2009/11/03
・SIL_LOC_SPNの仕様を変更．
  ロック取得を待つ間は，割込みをマスクしないように変更．

2009/10/07
 ・SIL_LOC_SPN用のMutex回路を追加

2009/09/24
 ・例外の個数を18に修正．

2009/09/15
 ・システムバージョン回路を追加．
 ・ディスパッチ用のプロセッサ間割込みハンドラのバイパス処理を追加

2009/07/14
 ・「CPU例外番号」ないしは「例外番号」を「CPU例外ハンドラ番号」に統一．

2009/04/28
 ・sio_isr() の引数の型を intptr_t に変更．

2009/02/02
 ・最初のリリース

以上．
