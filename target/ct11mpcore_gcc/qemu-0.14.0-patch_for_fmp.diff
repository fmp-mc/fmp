diff -urN qemu-0.14.0/configure qemu-0.14.0_for_fmp/configure
--- qemu-0.14.0/configure	2011-02-16 23:44:04.000000000 +0900
+++ qemu-0.14.0_for_fmp/configure	2011-03-08 13:37:24.425807800 +0900
@@ -934,7 +934,7 @@
 gcc_flags="-Wold-style-declaration -Wold-style-definition -Wtype-limits"
 gcc_flags="-Wformat-security -Wformat-y2k -Winit-self -Wignored-qualifiers $gcc_flags"
 gcc_flags="-Wmissing-include-dirs -Wempty-body -Wnested-externs $gcc_flags"
-gcc_flags="-fstack-protector-all $gcc_flags"
+#gcc_flags="-fstack-protector-all $gcc_flags"
 cat > $TMPC << EOF
 int main(void) { return 0; }
 EOF
diff -urN qemu-0.14.0/gdbstub.c qemu-0.14.0_for_fmp/gdbstub.c
--- qemu-0.14.0/gdbstub.c	2011-02-16 23:44:04.000000000 +0900
+++ qemu-0.14.0_for_fmp/gdbstub.c	2011-03-08 12:19:24.804416500 +0900
@@ -2646,7 +2646,7 @@
         if (strstart(device, "tcp:", NULL)) {
             /* enforce required TCP attributes */
             snprintf(gdbstub_device_name, sizeof(gdbstub_device_name),
-                     "%s,nowait,nodelay,server", device);
+                     "%s,nowait,nodelay,server,ipv4", device);
             device = gdbstub_device_name;
         }
 #ifndef _WIN32
diff -urN qemu-0.14.0/hw/a9mpcore.c qemu-0.14.0_for_fmp/hw/a9mpcore.c
--- qemu-0.14.0/hw/a9mpcore.c	2011-02-16 23:44:04.000000000 +0900
+++ qemu-0.14.0_for_fmp/hw/a9mpcore.c	2011-03-08 12:37:52.007744900 +0900
@@ -8,7 +8,7 @@
  */
 
 /* 64 external IRQ lines.  */
-#define GIC_NIRQ 96
+#define GIC_NIRQ 224
 #include "mpcore.c"
 
 static SysBusDeviceInfo mpcore_priv_info = {
diff -urN qemu-0.14.0/hw/arm_gic.c qemu-0.14.0_for_fmp/hw/arm_gic.c
--- qemu-0.14.0/hw/arm_gic.c	2011-02-16 23:44:04.000000000 +0900
+++ qemu-0.14.0_for_fmp/hw/arm_gic.c	2011-07-13 12:59:14.835984000 +0900
@@ -39,7 +39,7 @@
 {
     /* ??? The documentation seems to imply the enable bits are global, even
        for per-cpu interrupts.  This seems strange.  */
-    unsigned enabled:1;
+    unsigned enabled:NCPU;
     unsigned pending:NCPU;
     unsigned active:NCPU;
     unsigned level:NCPU;
@@ -54,9 +54,9 @@
 #define NUM_CPU(s) 1
 #endif
 
-#define GIC_SET_ENABLED(irq) s->irq_state[irq].enabled = 1
-#define GIC_CLEAR_ENABLED(irq) s->irq_state[irq].enabled = 0
-#define GIC_TEST_ENABLED(irq) s->irq_state[irq].enabled
+#define GIC_SET_ENABLED(irq, cm) s->irq_state[irq].enabled |= (cm)
+#define GIC_CLEAR_ENABLED(irq, cm) s->irq_state[irq].enabled &= ~(cm)
+#define GIC_TEST_ENABLED(irq, cm) ((s->irq_state[irq].enabled & (cm)) != 0)
 #define GIC_SET_PENDING(irq, cm) s->irq_state[irq].pending |= (cm)
 #define GIC_CLEAR_PENDING(irq, cm) s->irq_state[irq].pending &= ~(cm)
 #define GIC_TEST_PENDING(irq, cm) ((s->irq_state[irq].pending & (cm)) != 0)
@@ -128,7 +128,7 @@
         best_prio = 0x100;
         best_irq = 1023;
         for (irq = 0; irq < GIC_NIRQ; irq++) {
-            if (GIC_TEST_ENABLED(irq) && GIC_TEST_PENDING(irq, cm)) {
+            if (GIC_TEST_ENABLED(irq, cm) && GIC_TEST_PENDING(irq, cm)) {
                 if (GIC_GET_PRIORITY(irq, cpu) < best_prio) {
                     best_prio = GIC_GET_PRIORITY(irq, cpu);
                     best_irq = irq;
@@ -171,7 +171,7 @@
 
     if (level) {
         GIC_SET_LEVEL(irq, ALL_CPU_MASK);
-        if (GIC_TEST_TRIGGER(irq) || GIC_TEST_ENABLED(irq)) {
+        if (GIC_TEST_TRIGGER(irq) || GIC_TEST_ENABLED(irq, ALL_CPU_MASK)) {
             DPRINTF("Set %d pending mask %x\n", irq, GIC_TARGET(irq));
             GIC_SET_PENDING(irq, GIC_TARGET(irq));
         }
@@ -221,7 +221,7 @@
     if (irq != 1023) {
         /* Mark level triggered interrupts as pending if they are still
            raised.  */
-        if (!GIC_TEST_TRIGGER(irq) && GIC_TEST_ENABLED(irq)
+        if (!GIC_TEST_TRIGGER(irq) && GIC_TEST_ENABLED(irq, cm)
                 && GIC_TEST_LEVEL(irq, cm) && (GIC_TARGET(irq) & cm) != 0) {
             DPRINTF("Set %d pending mask %x\n", irq, cm);
             GIC_SET_PENDING(irq, cm);
@@ -280,7 +280,7 @@
             goto bad_reg;
         res = 0;
         for (i = 0; i < 8; i++) {
-            if (GIC_TEST_ENABLED(irq + i)) {
+            if (GIC_TEST_ENABLED(irq + i, cm)) {
                 res |= (1 << i);
             }
         }
@@ -331,7 +331,7 @@
         }
     } else if (offset < 0xf00) {
         /* Interrupt Configuration.  */
-        irq = (offset - 0xc00) * 2 + GIC_BASE_IRQ;
+        irq = (offset - 0xc00) * 4 + GIC_BASE_IRQ;
         if (irq >= GIC_NIRQ)
             goto bad_reg;
         res = 0;
@@ -399,7 +399,7 @@
         } else if (offset < 4) {
             /* ignored.  */
         } else {
-            goto bad_reg;
+            /* ignored.(DIC_SEC)  */  
         }
 #endif
     } else if (offset < 0x180) {
@@ -412,9 +412,9 @@
         for (i = 0; i < 8; i++) {
             if (value & (1 << i)) {
                 int mask = (irq < 32) ? (1 << cpu) : GIC_TARGET(irq);
-                if (!GIC_TEST_ENABLED(irq + i))
+                if (!GIC_TEST_ENABLED(irq + i, (1 << cpu)))
                     DPRINTF("Enabled IRQ %d\n", irq + i);
-                GIC_SET_ENABLED(irq + i);
+                GIC_SET_ENABLED(irq + i, ((irq<32)? (1<<cpu):ALL_CPU_MASK));
                 /* If a raised level triggered IRQ enabled then mark
                    is as pending.  */
                 if (GIC_TEST_LEVEL(irq + i, mask)
@@ -433,9 +433,9 @@
           value = 0;
         for (i = 0; i < 8; i++) {
             if (value & (1 << i)) {
-                if (GIC_TEST_ENABLED(irq + i))
+                if (GIC_TEST_ENABLED(irq + i, (1 << cpu)))
                     DPRINTF("Disabled IRQ %d\n", irq + i);
-                GIC_CLEAR_ENABLED(irq + i);
+                GIC_CLEAR_ENABLED(irq + i, ((irq<32)? (1<<cpu):ALL_CPU_MASK));
             }
         }
     } else if (offset < 0x280) {
@@ -448,7 +448,7 @@
 
         for (i = 0; i < 8; i++) {
             if (value & (1 << i)) {
-                GIC_SET_PENDING(irq + i, GIC_TARGET(irq));
+                GIC_SET_PENDING(irq + i, GIC_TARGET(irq + i));
             }
         }
     } else if (offset < 0x300) {
@@ -493,8 +493,13 @@
         irq = (offset - 0xc00) * 4 + GIC_BASE_IRQ;
         if (irq >= GIC_NIRQ)
             goto bad_reg;
-        if (irq < 32)
-            value |= 0xaa;
+        if (irq < 16) {
+            /* IPI */
+            value = 0x00;
+        } else if (irq == 28) {
+            value &= 0x03;
+            value &= 0x28;
+        }
         for (i = 0; i < 4; i++) {
             if (value & (1 << (i * 2))) {
                 GIC_SET_MODEL(irq + i);
@@ -642,7 +647,7 @@
 #endif
     }
     for (i = 0; i < 16; i++) {
-        GIC_SET_ENABLED(i);
+        GIC_SET_ENABLED(i, ALL_CPU_MASK);
         GIC_SET_TRIGGER(i);
     }
 #ifdef NVIC
diff -urN qemu-0.14.0/hw/arm11mpcore.c qemu-0.14.0_for_fmp/hw/arm11mpcore.c
--- qemu-0.14.0/hw/arm11mpcore.c	2011-07-13 11:45:17.078158800 +0900
+++ qemu-0.14.0_for_fmp/hw/arm11mpcore.c	2011-07-13 11:45:45.564788200 +0900
@@ -10,7 +10,7 @@
 /* ??? The MPCore TRM says the on-chip controller has 224 external IRQ lines
    (+ 32 internal).  However my test chip only exposes/reports 32.
    More importantly Linux falls over if more than 32 are present!  */
-#define GIC_NIRQ 64
+#define GIC_NIRQ 224
 #include "mpcore.c"
 
 /* Dummy PIC to route IRQ lines.  The baseboard has 4 independent IRQ
@@ -27,7 +27,7 @@
 /* Map baseboard IRQs onto CPU IRQ lines.  */
 static const int mpcore_irq_map[32] = {
     -1, -1, -1, -1,  1,  2, -1, -1,
-    -1, -1,  6, -1,  4,  5, -1, -1,
+    -1, -1,  6, -1,  4,  5, 12, 13,
     -1, 14, 15,  0,  7,  8, -1, -1,
     -1, -1, -1, -1,  9,  3, -1, -1,
 };
diff -urN qemu-0.14.0/hw/mpcore.c qemu-0.14.0_for_fmp/hw/mpcore.c
--- qemu-0.14.0/hw/mpcore.c	2011-02-16 23:44:04.000000000 +0900
+++ qemu-0.14.0_for_fmp/hw/mpcore.c	2011-03-08 12:48:37.055639500 +0900
@@ -214,6 +214,8 @@
         case 0: /* Control register.  */
             s->scu_control = value & 1;
             break;
+        case 0x08: /* CPU status.  */
+            break; /* ignore */
         case 0x0c: /* Invalidate all.  */
             /* This is a no-op as cache is not emulated.  */
             break;
@@ -247,7 +249,7 @@
     }
     return;
 bad_reg:
-    hw_error("mpcore_priv_read: Bad offset %x\n", (int)offset);
+    hw_error("mpcore_priv_write: Bad offset %x\n", (int)offset);
 }
 
 static CPUReadMemoryFunc * const mpcore_priv_readfn[] = {
diff -urN qemu-0.14.0/hw/realview.c qemu-0.14.0_for_fmp/hw/realview.c
--- qemu-0.14.0/hw/realview.c	2011-02-16 23:44:04.000000000 +0900
+++ qemu-0.14.0_for_fmp/hw/realview.c	2011-07-13 11:36:21.152505600 +0900
@@ -20,7 +20,7 @@
 #include "sysbus.h"
 #include "blockdev.h"
 
-#define SMP_BOOT_ADDR 0xe0000000
+#define SMP_BOOT_ADDR 0x00000000
 
 typedef struct {
     SysBusDevice busdev;
@@ -225,7 +225,7 @@
         qdev_prop_set_uint32(dev, "num-cpu", smp_cpus);
         qdev_init_nofail(dev);
         busdev = sysbus_from_qdev(dev);
-        if (is_pb) {
+        if (is_pb || is_mpcore) {
             realview_binfo.smp_priv_base = 0x1f000000;
         } else {
             realview_binfo.smp_priv_base = 0x10100000;
diff -urN qemu-0.14.0/scripts/signrom.sh qemu-0.14.0_for_fmp/scripts/signrom.sh
--- qemu-0.14.0/scripts/signrom.sh	2011-02-16 23:44:05.000000000 +0900
+++ qemu-0.14.0_for_fmp/scripts/signrom.sh	2011-03-08 12:23:21.544957300 +0900
@@ -28,18 +28,18 @@
 # find out the file size
 x=`dd if="$1" bs=1 count=1 skip=2 2>/dev/null | od -t u1 -A n`
 #size=`expr $x \* 512 - 1`
-size=$(( $x * 512 - 1 ))
+#size=$(( $x * 512 - 1 ))
 
 # now get the checksum
-nums=`od -A n -t u1 -v -N $size "$1"`
-for i in ${nums}; do
-    # add each byte's value to sum
-    sum=`expr \( $sum + $i \) % 256`
-done
+#nums=`od -A n -t u1 -v -N $size "$1"`
+#for i in ${nums}; do
+#    # add each byte's value to sum
+#    sum=`expr \( $sum + $i \) % 256`
+#done
 
-sum=$(( (256 - $sum) % 256 ))
-sum_octal=$( printf "%o" $sum )
+#sum=$(( (256 - $sum) % 256 ))
+#sum_octal=$( printf "%o" $sum )
 
 # and write the output file
 cp "$1" "$2"
-printf "\\$sum_octal" | dd of="$2" bs=1 count=1 seek=$size conv=notrunc 2>/dev/null
+#printf "\\$sum_octal" | dd of="$2" bs=1 count=1 seek=$size conv=notrunc 2>/dev/null
