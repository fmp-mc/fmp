=====================================================================
                  Nios2_Devターゲット依存部マニュアル
                                  Last Modified: 2011 Jun 16 15:15:23
=====================================================================

○概要

Nios2_Devターゲット依存部（Nios2_Dev依存部）は，Altera社のNios2プロセ
ッサを搭載した評価ボードをサポートしている．標準では，Altera社製の以下
のターゲットボードをサポートしている．

  ・Nios II エンベデッド評価キット Cyclone III エディション
  ・Cyclone III FPGA 開発キット
  ・Nios II 開発キット Stratix プロフェッショナルエディション

FMPカーネルはFPGA内蔵のリソースで動作するため，本依存部をベースとして，
メモリマップやデバイスのベースアドレスや割込み番号を変更することにより，
他のターゲットボードを容易にサポートすることが可能である．

○サポートしているコンフィギュレーション項目

Nios2_Dev依存部では，次のコンフィギュレーション項目をサポートしている．

・OS内部のロック単位
  ・ジャイアントロック方式
  ・プロセッサロック方式

・スピンロックアーキテクチャ
  ・エミュレーション方式

・タイマアーキテクチャ
  ・グローバルタイマ方式
  ・ローカルタイマ方式


○プロセッサ数

プロセッサの最大数は4個であるが，各ターゲットボード用のハードウェアリ
ファレンスのプロセッサ数は2個であるため，ディフォルトではカーネルは2個
用としてビルドされる．


○ハードウェアリファレンス(ptf)

概要で説明した3種類のターゲットボード用のptfファイルが ptf フォルダ以
下にある．

  ・nios2_dev_3c25.ptf
    ・Nios II エンベデッド評価キット Cyclone III エディション用ptfファ
      イル
  ・nios2_dev_3c120.ptf
    ・Cyclone III FPGA 開発キット用ptfファイル
  ・nios2_dev_1s40.ptf
    ・Nios II 開発キット Stratix プロフェッショナルエディション用ptfフ
      ァイル


○ビルド方法

ビルド時には，ターゲットボードを指定する必要がある．具体的には，
Makefile.target にあるBOARDマクロを以下のいずれかに設定する．

  ・nios2_dev_3c25
    ・Nios II エンベデッド評価キット Cyclone III エディション用ビルド
      指定
  ・nios2_dev_3c120
    ・Cyclone III FPGA 開発キット用ビルド指定
  ・nios2_dev_1s40
    ・Nios II 開発キット Stratix プロフェッショナルエディション用ビル
      ド指定

○実行方法

●コンソール

それぞれのコアの出力を jtag_uart により出力するため，コア数のコンソー
ルを開き，それぞれのコンソールで以下のコマンドを実行する．[instance]は，
インスタンス番号で，0からの値が SOPC Builder により自動的に割り付けら
れる番号を指定する．自動割付けのため，どのコアの jtag_uart がどのイン
スタンス番号に対応しているかは，実行するまで分からない．

nios2-terminal.exe --cable=USB-Blaster --instance=[instance]

●gdbサーバー

各コア用gdbサーバーを実行する．コア数のコンソールを開き，次のコマンド
を実行する．[instance]は，インスタンス番号で，0からの値が SOPC Builder 
により自動的に割り付けられる番号を指定する．[port]はポート番号で，コア
毎にユニークな番号を付ける．

nios2-gdb-server.exe -r --instance=[instance] --cable=USB-Blaster --tcpport=[port]

●gdb

各コア用のgdbを起動する．コア数のコンソールを開き，FMPをビルドしたディ
レクトリに移動して，次のコマンドを実行する．

nios2-elf-gdb fmp.exe

まず，gdbのコマンドラインで，次のコマンドを実行して gdbサーバーに接続
する

(gdb)target remote localhost:[port]
Remote debugging using localhost:1234
0x00000000 in ?? ()
(gdb)

次に接続しているコアのIDをチェックする．次のコマンドを実行すると，CPU
のレジスタ一覧が表示される．cpuidの項目が，コアのIDである．

(gdb)info registers
...
cpuid          0x1      1
...

各コアでファイルをロードする．

(gdb)load

全てのコアでロードを終了した後，実行を開始する．

(gdb)continue


○ 他のターゲットボードへの移植

サポートしているターゲットボード以外のターゲットボードをサポートするた
めには，以下の項目を設定する必要がある．

●コンパイルオプションとCライブラリ（Makefile.target）

Nios2 にハードウェア除算器等やを追加して，カーネルでこれらを使用するよ
うにコンパイルするためには，COPTSにコンパイルオプションを指定する必要がある．

●未定義命令例外以外の例外のサポート（nios2_system.h）

未定義命令例外以外の例外をサポートする場合は，
NIOS2_USE_EXTRA_EXCEPTION を定義する．

●タイマ関連

◎ベースアドレス（nios2_system.h）

#define  SYS_CLK_TIMER_X_BASE xxx

◎タイマクロック（nios2_system.h）

タイマ値の内部表現とミリ秒単位との変換を指定する．

#define TIMER_CLOCK     xxxx

◎割込み関連（nios2_system.h）

#define INHNO_TIMERX     xx       /* 割込みハンドラ番号 */
#define INTNO_TIMERX     xx       /* 割込み番号         */
#define INTPRI_TIMERX    xx       /* 割込み優先度       */
#define INTATR_TIMERX    xx       /* 割込み属性         */

●UART関連

Nios2 依存部の JTAG UART ドライバでは，最大4ポートのUARTをサポートして
いる．

◎コンパイル/リンク指定（Makefile.target）

JTAG UART を使用する場合は，Makefile.target で，SYSSVC_COBJS に，
jtag_uart.o を追加する．

SYSSVC_COBJS := $(SYSSVC_COBJS) jtag_uart.o

◎ベースアドレス（nios2_system.h）

#define JTAG_UART_X_BASE xxx

◎割込み番号等（nios2_system.h）

#define INHNO_SIO_PORTX   xx   /* 割込みハンドラ番号 */
#define INTNO_SIO_PORTX   xx   /* 割込み番号 */
#define INTPRI_SIO_PORTX  xx   /* 割込み優先度 */
#define INTATR_SIO_PORTX  xx   /* 割込み属性 */

◎ポート数（target_syssvc.h）

#define TNUM_PORT         xx

●カーネル低レベル出力用UART関連

Nios2依存部で用いる，カーネル低レベル出力用UARTの定義を行う．用いる 
UART としては，JTAG UART を用い，通常のログ出力と同じポートを使用可能
である．

◎ベースアドレス（target_config.c）

const uint32_t target_fput_log_base_table[TNUM_PRCID]

プロセッサ毎に指定する．

●プロセッサ間割込み回路

◎ベースアドレス（nios2_system.h）

#define PRC_INT_X_BASE  xxx

◎割込み番号等（nios2_system.h）

#define INHNO_IPIX   xxx

●Muex回路

◎ベースアドレス（nios2_system.h）

#define TSK_MUTEX_X_BASE   xxx
#define OBJ_MUTEX_X_BASE   xxx

●リンカスクリプト（Makefile.target）

ターゲット依存部部でリンカスクリプトを用意して，Makefile.target で，
LDSCRIPT に指定する．

●非タスクコンテキスト用のスタックサイズの定義（nios2_system.h）

非タスクコンテキスト用のスタックサイズを， target_config.h で定義する．
サイズは，4Byte単位で指定する．

#define DEFAULT_ISTKSZ    xxxx

例えば 4KByte を指定する場合は，次のように定義する．

#define DEFAULT_ISTKSZ    (0x1000U/4U)

●sil関連（nios2_system.h）

微少時間待ちのための定義を target_sil.h で定義する．値の決定方法は，
porting.txt を参照のこと．

#define SIL_DLY_TIM1    xxx
#define SIL_DLY_TIM2    xxx

●データセクションの初期化（nios2_system.h）

データセクションのLMAとVMAを別のアドレスとして，ROM化をしない場合には，
ターゲット依存部で，NIOS2_OMIT_DATA_INIT を定義する．定義することで，
スタートアップルーチンは，データセクションのROMからRAMへのコピーを行わ
ない．

●キャッシュサイズ（nios2_system.h）

インストラクションキャッシュとデータキャッシュのサイズとラインサイズを
指定する．

#define NIOS2_ICACHE_SIZE       xxx  /* 命令キャッシュサイズ         */
#define NIOS2_ICACHE_LINE_SIZE  xxx  /* 命令キャッシュラインサイズ   */
#define NIOS2_DCACHE_SIZE       xxx  /* データキャッシュサイズ       */
#define NIOS2_DCACHE_LINE_SIZE  xxx  /* データキャッシュラインサイズ */

○変更履歴

2011/06/16
・target.tf でDTQMBの配置先を指定するとき，型をDTQMBではなく，intptr_t 
  としていた問題を修正．

2010/10/14
・tfファイル内で定義されている TCL_ADMIN_PRC の定義を 
  target_kernel.h で定義されている，TOPPERS_SYSTIM_PRCID の定義と連動
  するように変更．
・TOPPERS_SYSTIM_PRCID の定義で使用する割込みハンドラを変更するように
  変更．
・クラス(TCL_x_ONLY)を追加．
    
2010/02/16
・グローバルタイマ方式時にタイマ割込みをTCL_ADMIN_PRC（クラスID 5）に
  属するように変更．

2009/10/07
 ・SIL_LOC_SPN用のMutex回路を追加

2009/02/27
 ・クラス3,4を追加

2009/02/19
 ・実行方法を追加

2009/02/02
 ・最初のリリース

以上．
